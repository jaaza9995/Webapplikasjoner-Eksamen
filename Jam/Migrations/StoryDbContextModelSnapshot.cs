// <auto-generated />
using System;
using Jam.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jam.Migrations
{
    [DbContext(typeof(StoryDbContext))]
    partial class StoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("Jam.Models.AnswerOption", b =>
                {
                    b.Property<int>("AnswerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SceneText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnswerOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("Jam.Models.PlayingSession", b =>
                {
                    b.Property<int>("PlayingSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentSceneId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayingSessionId");

                    b.HasIndex("CurrentSceneId");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayingSessions");
                });

            modelBuilder.Entity("Jam.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SceneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestionId");

                    b.HasIndex("SceneId")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Jam.Models.Scene", b =>
                {
                    b.Property<int>("SceneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextSceneId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SceneText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SceneType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SceneId");

                    b.HasIndex("NextSceneId")
                        .IsUnique();

                    b.HasIndex("StoryId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("Jam.Models.Story", b =>
                {
                    b.Property<int>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Accessible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dnf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Failed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Finished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Played")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("Jam.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Jam.Models.AnswerOption", b =>
                {
                    b.HasOne("Jam.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Jam.Models.PlayingSession", b =>
                {
                    b.HasOne("Jam.Models.Scene", "CurrentScene")
                        .WithMany()
                        .HasForeignKey("CurrentSceneId");

                    b.HasOne("Jam.Models.Story", "Story")
                        .WithMany("PlayingSessions")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jam.Models.User", "User")
                        .WithMany("PlayingSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentScene");

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Jam.Models.Question", b =>
                {
                    b.HasOne("Jam.Models.Scene", "Scene")
                        .WithOne("Question")
                        .HasForeignKey("Jam.Models.Question", "SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("Jam.Models.Scene", b =>
                {
                    b.HasOne("Jam.Models.Scene", "NextScene")
                        .WithMany()
                        .HasForeignKey("NextSceneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Jam.Models.Story", "Story")
                        .WithMany("Scenes")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextScene");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Jam.Models.Story", b =>
                {
                    b.HasOne("Jam.Models.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Jam.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("Jam.Models.Scene", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("Jam.Models.Story", b =>
                {
                    b.Navigation("PlayingSessions");

                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("Jam.Models.User", b =>
                {
                    b.Navigation("PlayingSessions");

                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
